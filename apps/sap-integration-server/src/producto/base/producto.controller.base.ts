/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductoService } from "../producto.service";
import { ProductoCreateInput } from "./ProductoCreateInput";
import { Producto } from "./Producto";
import { ProductoFindManyArgs } from "./ProductoFindManyArgs";
import { ProductoWhereUniqueInput } from "./ProductoWhereUniqueInput";
import { ProductoUpdateInput } from "./ProductoUpdateInput";
import { ProveedorFindManyArgs } from "../../proveedor/base/ProveedorFindManyArgs";
import { Proveedor } from "../../proveedor/base/Proveedor";
import { ProveedorWhereUniqueInput } from "../../proveedor/base/ProveedorWhereUniqueInput";

export class ProductoControllerBase {
  constructor(protected readonly service: ProductoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Producto })
  async createProducto(
    @common.Body() data: ProductoCreateInput
  ): Promise<Producto> {
    return await this.service.createProducto({
      data: data,
      select: {
        createdAt: true,
        descripcion: true,
        id: true,
        nombreProducto: true,
        precioUnitario: true,
        stock: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Producto] })
  @ApiNestedQuery(ProductoFindManyArgs)
  async productos(@common.Req() request: Request): Promise<Producto[]> {
    const args = plainToClass(ProductoFindManyArgs, request.query);
    return this.service.productos({
      ...args,
      select: {
        createdAt: true,
        descripcion: true,
        id: true,
        nombreProducto: true,
        precioUnitario: true,
        stock: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Producto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async producto(
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Producto | null> {
    const result = await this.service.producto({
      where: params,
      select: {
        createdAt: true,
        descripcion: true,
        id: true,
        nombreProducto: true,
        precioUnitario: true,
        stock: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Producto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProducto(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() data: ProductoUpdateInput
  ): Promise<Producto | null> {
    try {
      return await this.service.updateProducto({
        where: params,
        data: data,
        select: {
          createdAt: true,
          descripcion: true,
          id: true,
          nombreProducto: true,
          precioUnitario: true,
          stock: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Producto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProducto(
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Producto | null> {
    try {
      return await this.service.deleteProducto({
        where: params,
        select: {
          createdAt: true,
          descripcion: true,
          id: true,
          nombreProducto: true,
          precioUnitario: true,
          stock: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/proveedors")
  @ApiNestedQuery(ProveedorFindManyArgs)
  async findProveedors(
    @common.Req() request: Request,
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Proveedor[]> {
    const query = plainToClass(ProveedorFindManyArgs, request.query);
    const results = await this.service.findProveedors(params.id, {
      ...query,
      select: {
        contacto: true,
        createdAt: true,
        email: true,
        id: true,
        nombreProveedor: true,

        producto: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/proveedors")
  async connectProveedors(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: ProveedorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proveedors: {
        connect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/proveedors")
  async updateProveedors(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: ProveedorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proveedors: {
        set: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/proveedors")
  async disconnectProveedors(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: ProveedorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proveedors: {
        disconnect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }
}

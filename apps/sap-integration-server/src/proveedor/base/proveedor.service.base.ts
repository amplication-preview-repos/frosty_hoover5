/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Proveedor as PrismaProveedor,
  Producto as PrismaProducto,
} from "@prisma/client";

export class ProveedorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProveedorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.proveedor.count(args);
  }

  async proveedors(
    args: Prisma.ProveedorFindManyArgs
  ): Promise<PrismaProveedor[]> {
    return this.prisma.proveedor.findMany(args);
  }
  async proveedor(
    args: Prisma.ProveedorFindUniqueArgs
  ): Promise<PrismaProveedor | null> {
    return this.prisma.proveedor.findUnique(args);
  }
  async createProveedor(
    args: Prisma.ProveedorCreateArgs
  ): Promise<PrismaProveedor> {
    return this.prisma.proveedor.create(args);
  }
  async updateProveedor(
    args: Prisma.ProveedorUpdateArgs
  ): Promise<PrismaProveedor> {
    return this.prisma.proveedor.update(args);
  }
  async deleteProveedor(
    args: Prisma.ProveedorDeleteArgs
  ): Promise<PrismaProveedor> {
    return this.prisma.proveedor.delete(args);
  }

  async getProducto(parentId: string): Promise<PrismaProducto | null> {
    return this.prisma.proveedor
      .findUnique({
        where: { id: parentId },
      })
      .producto();
  }
}

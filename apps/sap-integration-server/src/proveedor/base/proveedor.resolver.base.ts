/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Proveedor } from "./Proveedor";
import { ProveedorCountArgs } from "./ProveedorCountArgs";
import { ProveedorFindManyArgs } from "./ProveedorFindManyArgs";
import { ProveedorFindUniqueArgs } from "./ProveedorFindUniqueArgs";
import { CreateProveedorArgs } from "./CreateProveedorArgs";
import { UpdateProveedorArgs } from "./UpdateProveedorArgs";
import { DeleteProveedorArgs } from "./DeleteProveedorArgs";
import { Producto } from "../../producto/base/Producto";
import { ProveedorService } from "../proveedor.service";
@graphql.Resolver(() => Proveedor)
export class ProveedorResolverBase {
  constructor(protected readonly service: ProveedorService) {}

  async _proveedorsMeta(
    @graphql.Args() args: ProveedorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Proveedor])
  async proveedors(
    @graphql.Args() args: ProveedorFindManyArgs
  ): Promise<Proveedor[]> {
    return this.service.proveedors(args);
  }

  @graphql.Query(() => Proveedor, { nullable: true })
  async proveedor(
    @graphql.Args() args: ProveedorFindUniqueArgs
  ): Promise<Proveedor | null> {
    const result = await this.service.proveedor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Proveedor)
  async createProveedor(
    @graphql.Args() args: CreateProveedorArgs
  ): Promise<Proveedor> {
    return await this.service.createProveedor({
      ...args,
      data: {
        ...args.data,

        producto: args.data.producto
          ? {
              connect: args.data.producto,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Proveedor)
  async updateProveedor(
    @graphql.Args() args: UpdateProveedorArgs
  ): Promise<Proveedor | null> {
    try {
      return await this.service.updateProveedor({
        ...args,
        data: {
          ...args.data,

          producto: args.data.producto
            ? {
                connect: args.data.producto,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Proveedor)
  async deleteProveedor(
    @graphql.Args() args: DeleteProveedorArgs
  ): Promise<Proveedor | null> {
    try {
      return await this.service.deleteProveedor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Producto, {
    nullable: true,
    name: "producto",
  })
  async getProducto(
    @graphql.Parent() parent: Proveedor
  ): Promise<Producto | null> {
    const result = await this.service.getProducto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

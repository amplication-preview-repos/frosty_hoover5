/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Factura } from "./Factura";
import { FacturaCountArgs } from "./FacturaCountArgs";
import { FacturaFindManyArgs } from "./FacturaFindManyArgs";
import { FacturaFindUniqueArgs } from "./FacturaFindUniqueArgs";
import { CreateFacturaArgs } from "./CreateFacturaArgs";
import { UpdateFacturaArgs } from "./UpdateFacturaArgs";
import { DeleteFacturaArgs } from "./DeleteFacturaArgs";
import { Cliente } from "../../cliente/base/Cliente";
import { FacturaService } from "../factura.service";
@graphql.Resolver(() => Factura)
export class FacturaResolverBase {
  constructor(protected readonly service: FacturaService) {}

  async _facturasMeta(
    @graphql.Args() args: FacturaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Factura])
  async facturas(
    @graphql.Args() args: FacturaFindManyArgs
  ): Promise<Factura[]> {
    return this.service.facturas(args);
  }

  @graphql.Query(() => Factura, { nullable: true })
  async factura(
    @graphql.Args() args: FacturaFindUniqueArgs
  ): Promise<Factura | null> {
    const result = await this.service.factura(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Factura)
  async createFactura(
    @graphql.Args() args: CreateFacturaArgs
  ): Promise<Factura> {
    return await this.service.createFactura({
      ...args,
      data: {
        ...args.data,

        cliente: args.data.cliente
          ? {
              connect: args.data.cliente,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Factura)
  async updateFactura(
    @graphql.Args() args: UpdateFacturaArgs
  ): Promise<Factura | null> {
    try {
      return await this.service.updateFactura({
        ...args,
        data: {
          ...args.data,

          cliente: args.data.cliente
            ? {
                connect: args.data.cliente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Factura)
  async deleteFactura(
    @graphql.Args() args: DeleteFacturaArgs
  ): Promise<Factura | null> {
    try {
      return await this.service.deleteFactura(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Cliente, {
    nullable: true,
    name: "cliente",
  })
  async getCliente(@graphql.Parent() parent: Factura): Promise<Cliente | null> {
    const result = await this.service.getCliente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FacturaService } from "../factura.service";
import { FacturaCreateInput } from "./FacturaCreateInput";
import { Factura } from "./Factura";
import { FacturaFindManyArgs } from "./FacturaFindManyArgs";
import { FacturaWhereUniqueInput } from "./FacturaWhereUniqueInput";
import { FacturaUpdateInput } from "./FacturaUpdateInput";

export class FacturaControllerBase {
  constructor(protected readonly service: FacturaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Factura })
  async createFactura(
    @common.Body() data: FacturaCreateInput
  ): Promise<Factura> {
    return await this.service.createFactura({
      data: {
        ...data,

        cliente: data.cliente
          ? {
              connect: data.cliente,
            }
          : undefined,
      },
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        fechaEmision: true,
        id: true,
        numeroFactura: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Factura] })
  @ApiNestedQuery(FacturaFindManyArgs)
  async facturas(@common.Req() request: Request): Promise<Factura[]> {
    const args = plainToClass(FacturaFindManyArgs, request.query);
    return this.service.facturas({
      ...args,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        fechaEmision: true,
        id: true,
        numeroFactura: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Factura })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async factura(
    @common.Param() params: FacturaWhereUniqueInput
  ): Promise<Factura | null> {
    const result = await this.service.factura({
      where: params,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        fechaEmision: true,
        id: true,
        numeroFactura: true,
        total: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Factura })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFactura(
    @common.Param() params: FacturaWhereUniqueInput,
    @common.Body() data: FacturaUpdateInput
  ): Promise<Factura | null> {
    try {
      return await this.service.updateFactura({
        where: params,
        data: {
          ...data,

          cliente: data.cliente
            ? {
                connect: data.cliente,
              }
            : undefined,
        },
        select: {
          cliente: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          fechaEmision: true,
          id: true,
          numeroFactura: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Factura })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFactura(
    @common.Param() params: FacturaWhereUniqueInput
  ): Promise<Factura | null> {
    try {
      return await this.service.deleteFactura({
        where: params,
        select: {
          cliente: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          fechaEmision: true,
          id: true,
          numeroFactura: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Factura as PrismaFactura,
  Cliente as PrismaCliente,
} from "@prisma/client";

export class FacturaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FacturaCountArgs, "select">): Promise<number> {
    return this.prisma.factura.count(args);
  }

  async facturas(args: Prisma.FacturaFindManyArgs): Promise<PrismaFactura[]> {
    return this.prisma.factura.findMany(args);
  }
  async factura(
    args: Prisma.FacturaFindUniqueArgs
  ): Promise<PrismaFactura | null> {
    return this.prisma.factura.findUnique(args);
  }
  async createFactura(args: Prisma.FacturaCreateArgs): Promise<PrismaFactura> {
    return this.prisma.factura.create(args);
  }
  async updateFactura(args: Prisma.FacturaUpdateArgs): Promise<PrismaFactura> {
    return this.prisma.factura.update(args);
  }
  async deleteFactura(args: Prisma.FacturaDeleteArgs): Promise<PrismaFactura> {
    return this.prisma.factura.delete(args);
  }

  async getCliente(parentId: string): Promise<PrismaCliente | null> {
    return this.prisma.factura
      .findUnique({
        where: { id: parentId },
      })
      .cliente();
  }
}
